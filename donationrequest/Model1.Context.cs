//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace donationrequest
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ADS_CentralizedDegreePlans_StagingEntities : DbContext
    {
        public ADS_CentralizedDegreePlans_StagingEntities()
            : base("name=ADS_CentralizedDegreePlans_StagingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<ForeignCourse> ForeignCourses { get; set; }
        public virtual DbSet<Institution> Institutions { get; set; }
        public virtual DbSet<JunctionEq> JunctionEqs { get; set; }
        public virtual DbSet<JunctionPC> JunctionPCs { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
    
        public virtual ObjectResult<string> FetchAll(string programcode)
        {
            var programcodeParameter = programcode != null ?
                new ObjectParameter("programcode", programcode) :
                new ObjectParameter("programcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FetchAll", programcodeParameter);
        }
    
        public virtual ObjectResult<FetchPlan_Result> FetchPlan(string programcode, string year, string semester, string country)
        {
            var programcodeParameter = programcode != null ?
                new ObjectParameter("programcode", programcode) :
                new ObjectParameter("programcode", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var semesterParameter = semester != null ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPlan_Result>("FetchPlan", programcodeParameter, yearParameter, semesterParameter, countryParameter);
        }
    
        public virtual ObjectResult<Countrywise_Result> Countrywise(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Countrywise_Result>("Countrywise", countryParameter);
        }
    }
}
